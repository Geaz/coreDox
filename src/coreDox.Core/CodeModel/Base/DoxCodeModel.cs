using coreDox.Core.Contracts;
using System;
using System.Collections.Generic;
using System.Linq;

namespace coreDox.Core.Model.Code.Base
{
    public abstract class DoxCodeModel : IEquatable<DoxCodeModel>
    {
        /// <summary>
        /// This method returns the given <see cref="IModel"/> which was generated by the corresponding <see cref="IModelProvider"/>.
        /// </summary>
        /// <typeparam name="T">The <c>Type</c> of the <see cref="IModel"/>.</typeparam>
        /// <returns>Returns the found model or <c>null</c>, if not found.</returns>
        public T GetModel<T>() where T : IModel
        {
            return (T) Models.SingleOrDefault(m => m.GetType() == typeof(T));
        }

        /// <summary>
        /// Implements <see cref="IEquatable{T}"/>
        /// </summary>
        /// <param name="other">The <see cref="DoxCodeModel"/> to compare the current instance to.</param>
        /// <returns><c>true</c>, if equal. <c>false</c>, otherwise.</returns>
        public bool Equals(DoxCodeModel other)
        {
            return ID == other.ID;
        }

        /// <summary>
        /// The ID of the code element.
        /// </summary>
        public string ID { get; protected set; }

        /// <summary>
        /// The name of the code element.
        /// </summary>
        public string Name { get; protected set; }

        /// <summary>
        /// The full name of the code element.
        /// </summary>
        public string FullName { get; protected set; }

        /// <summary>
        /// The list of all models generated by the registered <see cref="IModelProvider"/>s.
        /// </summary>
        public List<IModel> Models { get; } = new List<IModel>();
    }
}
